//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// Tue Jul 30 2019 21:09:28
//
//      Input file      : 
//      Component name  : arm7tdmis_top
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------

//****************************************************************************************************
// Top entity for ARM7TDMI-S processor
// Designed by Ruslan Lepetenok
// Modified 12.02.2003
//****************************************************************************************************
`include "armpackage.v"

module arm7tdmis_top(
   CLK,
   PAUSE,
   nRESET,
   nIRQ,
   nFIQ,
   ADDR,
   WDATA,
   RDATA,
   ABORT,
   WRITE,
   SIZE,
   MODE,
   PREEMPTABLE
);
   // Clock
   input         CLK;
   input         PAUSE;
   // Interrupts
   input         nRESET;
   input         nIRQ;
   input         nFIQ;
   // Memory interface
   output [31:0] ADDR;
   output [31:0] WDATA;
   input [31:0]  RDATA;
   input         ABORT;
   output        WRITE;
   output [1:0]  SIZE;
   // Information signals
   output [4:0]  MODE;
   output        PREEMPTABLE;
   
   
   parameter     CSlackEstim = 1'b0;
   
   // Components
   
   // ALU
   // MOV/MVN operations
   // Logic operations
   // Flag inputs
   // ADC/SBC/RSC instructions
   // Flag outputs
   
   // Shifter
   // Input data (B-Bus)
   // Output data
   // Input of the carry flag
   // Output of the carry flag
   // Shift amount for register shift (value of Rs[7..0])
   // Shift amount for immediate shift (bits [11..7])
   // Shift type (bits 6,5 and 4 of instruction)
   // Rotate immediate 8-bit value
   
   // Multiplier
   // Global signals
   // Data inputs
   // RdHi(Rn)/Rs data path
   // RdLo(Rd)/Rm data path
   // Data outputs
   // Control inputs
   // Load Rs and Rm and start
   // Load partial sum register with RHi:RLo
   // Clear prtial sum register
   // Unsigned multiplication
   // 0 - Read PS/PC low,1 - Read PS/PC high
   // Control outputs
   // Multiplication result is ready
   
   // Register file
   // Global control signals
   // Data buses
   // Address an control
   // Program counter
   //???
   // Global control
   
   // Program status registers
   // Global control signals
   // ALU Data in
   // Current program state
   // Saved program state
   // PSR mode control
   
   // Instruction pipeline, data in register, immediate data extractor
   // Clock and reset
   // Memory interface
   // Thumb decoder interface
   // Interfaces for the internal CPU modules
   // Address [1..0]
   // Data out register and control(sign/zero, byte/halfword  extension)
   // Immediate fields out
   // Bus control
   
   // Address register and incrementer
   // Clock and reset
   // Address and control
   
   // Data out register
   // Control signals
   // Data signals
   
   // Register for shift amount
   // Clock and reset
   // Data signals
   // Shift amount for register shift (value of Rs[7..0])
   
   // A bus multiplexer
   // Data input
   // Control
   // Data output
   
   // B bus multiplexer
   // Data input
   // Immediate fields
   // Control
   // Output of the register file
   // Output of the multiplier
   // Output of the data in register
   // Data output
   // Connected to the input of the shifter
   
   // Address generator for load/store
   // Global control signals
   // Control and data
   // 0 -> Start address, 1-> Base reg. update (only for LDM/STM)
   // 0 -> LDM/STM, 1 -> LDR/STR
   
   // Data
   // Control
   
   // Combinatorial Thumb decoder
   
   // Control logic
   // Clock and reset
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Control signals commom for several modules
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Instruction pipeline and data in registers control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Interfaces for the internal CPU modules
   // Data out register and control(sign/zero, byte/halfword  extension)
   // Bus control
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Data output register control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Address multiplexer and incrementer control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // ?? Common  1
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // ALU control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // MOV/MVN operations
   // Logic operations
   // Flag inputs
   // ADC/SBC/RSC instructions
   // Flag outputs
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Multiplier control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Load Rs and Rm and start
   // Load partial sum register with RHi:RLo
   // Clear prtial sum register
   // Unsigned multiplication
   // 0 - Read PS/PC low,1 - Read PS/PC high
   // Multiplication result is ready
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Register file control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Program counter
   // Mode control signals
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Programm Status Registers control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // ALU bus input control
   // Current program state
   // Saved program state
   // PSR mode control
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Shifter control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   //	                   ShCFlagIn  : out std_logic;                     -- Input of the carry flag
   //					   ShCFlagOut : in  std_logic;                     -- Output of the carry flag
   // Shift amount for immediate shift (bits [11..7])
   // Shift type (bits 6,5 and 4 of instruction)
   // Rotate immediate 8-bit value
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Bus A multiplexer control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Bus B multiplexer control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Output of the register file
   // Output of the multiplier
   // Output of the data in register
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Address generator for Load/Store instructions control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Bit 0,1 clear/set control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Thumb decoder control
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Rm[0] input for ARM/Thumb state detection during BX
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // AddrLow for DataRotator in IPDR
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // External signals
   // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   // Interrupts
   // Memory interface
   
   // Control signals
   wire          CLKEN;
   
   // ALU signals
   wire [31:0]   ALU_DataOut;
   wire          ALU_InvA;
   wire          ALU_InvB;
   wire          ALU_PassA;
   wire          ALU_PassB;
   wire          ALU_AND_Op;
   wire          ALU_ORR_Op;
   wire          ALU_EOR_Op;
   wire          ALU_CFlagIn;
   wire          ALU_CFlagUse;
   wire          ALU_CFlagOut;
   wire          ALU_VFlagOut;
   wire          ALU_NFlagOut;
   wire          ALU_ZFlagOut;
   wire          ALU_ThADR;
   
   // Shifter signals
   wire [31:0]   Shifter_ShBBusIn;
   wire [31:0]   Shifter_ShOut;
   
   wire          Shifter_ShCFlagIn;
   wire          Shifter_ShCFlagOut;
   wire [7:0]    Shifter_ShLenRs;
   wire [4:0]    Shifter_ShLenImm;
   wire [2:0]    Shifter_ShType;
   wire          Shifter_ShRotImm;
   wire          Shifter_ShEn;
   wire          Shifter_ShCFlagEn;
   
   // Register file signals
   wire [31:0]   RegFile_ABusOut;
   wire [31:0]   RegFile_BBusOut;
   wire [3:0]    RegFile_ABusRdAdr;
   wire [3:0]    RegFile_BBusRdAdr;
   wire [3:0]    RegFile_WriteAdr;
   wire          RegFile_WrEn;
   wire [31:0]   RegFile_PCIn;
   wire [31:0]   RegFile_PCOut;
   wire          RegFile_PCWrEn;
   wire          RegFile_PCSrcSel;
   wire [4:0]    RegFile_RFMode;
   wire          RegFile_SaveBaseReg;
   wire          RegFile_RestoreBaseReg;
   
   // Multiplier signals
   wire [31:0]   Mult_ADataOut;
   wire [31:0]   Mult_BDataOut;
   wire          Mult_LoadRsRm;
   wire          Mult_LoadPS;
   wire          Mult_ClearPSC;
   wire          Mult_UnsignedMul;
   wire          Mult_ReadLH;
   wire          Mult_MulResRdy;
   
   // Program status registers signals
   wire [31:0]   PSR_CPSRIn;
   wire [31:0]   PSR_CPSRWrEn;
   wire [31:0]   PSR_CPSROut;
   wire          PSR_CFlForMul;
   wire [31:0]   PSR_SPSRIn;
   wire [3:0]    PSR_SPSRWrMsk;
   wire [31:0]   PSR_SPSROut;
   wire [4:0]    PSR_PSRMode;
   wire          PSR_PSRDInSel;
   `define PSR_CFlagOut PSR_CPSROut[29]
   
   // Instruction pipeline signals
   wire [31:0]   IPDR_InstForDecode;
   wire          IPDR_StagnatePipeline;
   wire          IPDR_StagnatePipelineDel;
   wire          IPRD_FirstInstFetch;
   wire          IPDR_InstFetchAbort;
   wire [31:0]   IPDR_DataOut;
   wire [31:0]   IPDR_SExtOffset24Bit;
   wire [31:0]   IPDR_Offset12Bit;
   wire [31:0]   IPDR_Offset8Bit;
   wire [31:0]   IPDR_Immediate8Bit;
   wire          IPDR_EndianMode;
   wire [1:0]    IPDR_DataAddrLow;
   
   wire          IPDR_SignExt;
   wire          IPDR_ZeroExt;
   wire          IPDR_nB_HW;
   
   // Thumb decoder interface
   wire [31:0]   IPDR_ToThumbDecoder;
   wire [31:0]   IPDR_FromThumbDecoder;
   wire          IPDR_HalfWordAddress;
   wire          ThDC_ThBLFP;
   wire          ThDC_ThBLSP;
   
   // Address multiplexer and incrementer signals
   wire [31:0]   AMI_FromPC;
   wire [31:0]   AMI_ToPC;
   wire [31:0]   AMI_FromALU;
   wire [31:0]   AMI_ExceptionVector;
   
   wire          AMI_PCInSel;
   wire          AMI_ALUInSel;
   wire          AMI_ExceptionVectorSel;
   wire          AMI_PCIncStep;
   wire          AMI_AdrIncStep;
   wire          AMI_AdrToPCSel;
   wire          AMI_AdrCntEn;
   
   // Data out register signals
   wire          DOR_StoreHalfWord;
   wire          DOR_StoreByte;
   
   // Register for shift amount signals
   wire [7:0]    RSA_ShLenRsOut;
   
   // A bus multiplexer signals
   wire [31:0]   ABM_ABusOut;
   wire          ABM_RegFileAOutSel;
   wire          ABM_MultiplierAOutSel;
   wire          ABM_CPSROutSel;
   wire          ABM_SPSROutSel;
   
   // B bus multiplexer signals
   wire [31:0]   BBM_BBusOut;
   wire          BBM_RegFileBOutSel;
   wire          BBM_MultiplierBOutSel;
   wire          BBM_MemDataRegOutSel;
   wire          BBM_SExtOffset24BitSel;
   wire          BBM_Offset12BitSel;
   wire          BBM_Offset8BitSel;
   wire          BBM_Immediate8BitSel;
   wire          BBM_AdrGenDataSel;
   
   // Address generator for load/store signals
   wire [31:0]   LSAdrGen_BDataOut;
   wire [15:0]   LSAdrGen_RegisterList;
   wire          LSAdrGen_IncBeforeSel;
   wire          LSAdrGen_DecBeforeSel;
   wire          LSAdrGen_DecAfterSel;
   wire          LSAdrGen_MltAdrSel;
   wire          LSAdrGen_SngMltSel;
   
   // Bit 0,1 clearer
   wire [31:0]   RBM_DataOut;
   wire          RBM_ClrBitZero;
   wire          RBM_ClrBitOne;
   wire          RBM_SetBitZero;
   
   // Thumb decoder signals
   wire          ThDC_ThumbDecoderEn;
   
   // Internal copies of some core outputs
   wire [31:0]   ADDR_Int;
   wire [1:0]    SIZE_Int;
   wire          PREEMPTABLE_Int;
   
   wire          BigEndianMode;
   
   // ALU
   alu alu_Inst(
      .ADataIn(ABM_ABusOut),		// Output of A bus multiplexer
      .BDataIn(Shifter_ShOut),		// Output of the shifter
      .DataOut(ALU_DataOut),
      .InvA(ALU_InvA),
      .InvB(ALU_InvB),
      .PassA(ALU_PassA),
      .PassB(ALU_PassB),
      // Logic operations
      .AND_Op(ALU_AND_Op),
      .ORR_Op(ALU_ORR_Op),
      .EOR_Op(ALU_EOR_Op),
      // Flag inputs
      .CFlagIn(ALU_CFlagIn),
      .CFlagUse(ALU_CFlagUse),
      .ThADR(ALU_ThADR),
      // Flag outputs
      .CFlagOut(ALU_CFlagOut),
      .VFlagOut(ALU_VFlagOut),
      .NFlagOut(ALU_NFlagOut),
      .ZFlagOut(ALU_ZFlagOut)
   );
   
   // Shifter
   shifter shifter_Inst(
      .ShBBusIn(BBM_BBusOut),		// Output of B bus multiplexer
      .ShOut(Shifter_ShOut),		// To ALU
      .ShCFlagIn(`PSR_CFlagOut),
      .ShCFlagOut(ALU_CFlagIn),		// To ALU
      .ShLenRs(Shifter_ShLenRs),		// From shift amount register
      .ShLenImm(Shifter_ShLenImm),		// From control logic
      .ShType(Shifter_ShType),		// From control logic
      .ShRotImm(Shifter_ShRotImm),		// From control logic
      .ShEn(Shifter_ShEn),		// From control logic
      .ShCFlagEn(Shifter_ShCFlagEn)		// From control logic
   );
   
   // Multiplier
   multiplier multiplier_Inst(
      // Global signals
      .nRESET(nRESET),
      .CLK(CLK),
      .CLKEN(CLKEN),
      // Data inputs
      .ADataIn(RegFile_ABusOut),
      .BDataIn(RegFile_BBusOut),
      // Data outputs
      .ADataOut(Mult_ADataOut),
      .BDataOut(Mult_BDataOut),
      // Control inputs
      .LoadRsRm(Mult_LoadRsRm),
      .LoadPS(Mult_LoadPS),
      .ClearPSC(Mult_ClearPSC),
      .UnsignedMul(Mult_UnsignedMul),
      .ReadLH(Mult_ReadLH),
      // Control outputs
      .MulResRdy(Mult_MulResRdy)
   );
   
   // Register file
   regfile #(1'b1) regfile_Inst(
      // Global control signals
      .nRESET(nRESET),
      .CLK(CLK),
      .CLKEN(CLKEN),
      // Data buses
      .ABusOut(RegFile_ABusOut),
      .BBusOut(RegFile_BBusOut),
      .DataIn(RBM_DataOut),		// From ALU *
      // Address an control
      .ABusRdAdr(RegFile_ABusRdAdr),
      .BBusRdAdr(RegFile_BBusRdAdr),
      .WriteAdr(RegFile_WriteAdr),
      .WrEn(RegFile_WrEn),
      // Program counter
      .PCIn(RegFile_PCIn),
      .PCOut(RegFile_PCOut),
      .PCWrEn(RegFile_PCWrEn),
      .PCSrcSel(RegFile_PCSrcSel),
      // Global control
      .RFMode(RegFile_RFMode),
      .SaveBaseReg(RegFile_SaveBaseReg),
      .RestoreBaseReg(RegFile_RestoreBaseReg)
   );
   
   // Program status registers

   psr psr_Inst(
      // Global control signals
      .nRESET(nRESET),
      .CLK(CLK),
      .CLKEN(CLKEN),
      // ALU Data in
      .DataIn(ALU_DataOut),
      .PSRDInSel(PSR_PSRDInSel),
      // Current program state
      .CPSRIn(PSR_CPSRIn),
      .CPSRWrEn(PSR_CPSRWrEn),
      .CPSROut(PSR_CPSROut),
      .CFlForMul(PSR_CFlForMul),
      // Saved program state
      .SPSRIn(PSR_SPSRIn),
      .SPSROut(PSR_SPSROut),
      .SPSRWrMsk(PSR_SPSRWrMsk),
      // PSR mode control
      .PSRMode(PSR_PSRMode)
   );

   
   ipdr ipdr_Inst(
      // Clock and reset
      .nRESET(nRESET),
      .CLK(CLK),
      .CLKEN(CLKEN),
      // Memory interface
      .RDATA(RDATA),
      .ABORT(ABORT),
      // Thumb decoder interface
      .ToThumbDecoder(IPDR_ToThumbDecoder),
      .FromThumbDecoder(IPDR_FromThumbDecoder),
      .HalfWordAddress(IPDR_HalfWordAddress),
      // Interfaces for the internal CPU modules
      .InstForDecode(IPDR_InstForDecode),
      .InstFetchAbort(IPDR_InstFetchAbort),
      .ADDRLow(IPDR_DataAddrLow),
      .StagnatePipeline(IPDR_StagnatePipeline),
      .StagnatePipelineDel(IPDR_StagnatePipelineDel),
      .FirstInstFetch(IPRD_FirstInstFetch),
      // Data out register and control(sign/zero, byte/halfword  extension)
      .DataOut(IPDR_DataOut),
      .SignExt(IPDR_SignExt),
      .ZeroExt(IPDR_ZeroExt),
      .nB_HW(IPDR_nB_HW),
      // Immediate fields out
      .SExtOffset24Bit(IPDR_SExtOffset24Bit),
      .Offset12Bit(IPDR_Offset12Bit),
      .Offset8Bit(IPDR_Offset8Bit),
      .Immediate8Bit(IPDR_Immediate8Bit),
      // Bus control
      .EndianMode(IPDR_EndianMode)
   );
   
   // Address register and incrementer
   addressmux_incrementer addressmux_incrementer_inst(
      // Clock and reset
      .nRESET(nRESET),
      .CLK(CLK),
      .CLKEN(CLKEN),
      // Address and control
      .ADDR(ADDR_Int),
      .FromPC(RegFile_PCOut),		// From register file
      .ToPC(RegFile_PCIn),		// To register file
      .FromALU(RBM_DataOut),		// From ALU *
      .ExceptionVector(AMI_ExceptionVector),		// From control logic
      .PCInSel(AMI_PCInSel),
      .ALUInSel(AMI_ALUInSel),
      .ExceptionVectorSel(AMI_ExceptionVectorSel),
      .PCIncStep(AMI_PCIncStep),
      .AdrIncStep(AMI_AdrIncStep),
      .AdrToPCSel(AMI_AdrToPCSel),
      .AdrCntEn(AMI_AdrCntEn)
   );
   
   // Data out register
   dataoutmux dataoutmux_inst(
      // Control signals
      .StoreHalfWord(DOR_StoreHalfWord),		// From control logic
      .StoreByte(DOR_StoreByte),		// From control logic
      .BigEndianMode(BigEndianMode),		// From control logic
      // Data signals
      .DataIn(RegFile_BBusOut),		// From the register file
      .WDATA(WDATA)		// Output of the core
   );
   
   // Register for shift amount
   shiftamountreg shiftamountreg_inst(
      // Clock and reset
      .nRESET(nRESET),
      .CLK(CLK),
      .CLKEN(CLKEN),
      // Data signals
      .ShLenRsIn(RegFile_ABusOut[7:0]),		// From register file
      .ShLenRsOut(Shifter_ShLenRs)		// To shifter
   );
   
   // A bus multiplexer
   abusmultiplexer abusmultiplexer_inst(
      // Data input
      .RegFileAOut(RegFile_ABusOut),
      .MultiplierAOut(Mult_ADataOut),
      .CPSROut(PSR_CPSROut),
      .SPSROut(PSR_SPSROut),
      // Control
      .RegFileAOutSel(ABM_RegFileAOutSel),
      .MultiplierAOutSel(ABM_MultiplierAOutSel),
      .CPSROutSel(ABM_CPSROutSel),
      .SPSROutSel(ABM_SPSROutSel),
      // Data output
      .ABusOut(ABM_ABusOut)
   );
   
   // B bus multiplexer
   bbusmultiplexer bbusmultiplexer_inst(
      // Data input
      .RegFileBOut(RegFile_BBusOut),
      .MultiplierBOut(Mult_BDataOut),
      .MemDataRegOut(IPDR_DataOut),					// From zero or sign extender
      .AdrGenDataOut(LSAdrGen_BDataOut),			// From the addrerss generator
      // Immediate fields
      .SExtOffset24Bit(IPDR_SExtOffset24Bit),		// From instruction pipeline
      .Offset12Bit(IPDR_Offset12Bit),				// From instruction pipeline
      .Offset8Bit(IPDR_Offset8Bit),					// From instruction pipeline
      .Immediate8Bit(IPDR_Immediate8Bit),			// From instruction pipeline
      // Control
      .RegFileBOutSel(BBM_RegFileBOutSel),			// Control logic
      .MultiplierBOutSel(BBM_MultiplierBOutSel),	// Control logic
      .MemDataRegOutSel(BBM_MemDataRegOutSel),		// Control logic
      .SExtOffset24BitSel(BBM_SExtOffset24BitSel),	// Control logic
      .Offset12BitSel(BBM_Offset12BitSel),			// Control logic
      .Offset8BitSel(BBM_Offset8BitSel),			// Control logic
      .Immediate8BitSel(BBM_Immediate8BitSel),		// Control logic
      .AdrGenDataSel(BBM_AdrGenDataSel),
      // Data output
      .BBusOut(BBM_BBusOut)
   );

   // Address generator for load/store
   lsadrgen lsadrgen_inst(
      // Global control signals
      .nRESET(nRESET),
      .CLK(CLK),
      .CLKEN(CLKEN),
      // Control and data
      .RmDataIn(RegFile_BBusOut),		//  !!! was BBM_BBusOut,
      .BDataOut(LSAdrGen_BDataOut),
      .RegisterList(LSAdrGen_RegisterList),
      .IncBeforeSel(LSAdrGen_IncBeforeSel),
      .DecBeforeSel(LSAdrGen_DecBeforeSel),
      .DecAfterSel(LSAdrGen_DecAfterSel),
      .MltAdrSel(LSAdrGen_MltAdrSel),
      .SngMltSel(LSAdrGen_SngMltSel)
   );
   

   resltbitmask resltbitmask_inst(
      // Data
      .DataIn(ALU_DataOut),
      .DataOut(RBM_DataOut),
      // Control
      .ClrBitZero(RBM_ClrBitZero),
      .ClrBitOne(RBM_ClrBitOne),
      .SetBitZero(RBM_SetBitZero)
   );
   

   thumbdecoder thumbdecoder_inst(
      .CLK(CLK),
      .nRESET(nRESET),
      .CLKEN(CLKEN),
      .InstForDecode(IPDR_ToThumbDecoder),
      .ExpandedInst(IPDR_FromThumbDecoder),
      .HalfWordAddress(IPDR_HalfWordAddress),
      .ThumbDecoderEn(ThDC_ThumbDecoderEn),
      .StagnatePipeline(IPDR_StagnatePipeline),
      .ThBLFP(ThDC_ThBLFP),
      .ThBLSP(ThDC_ThBLSP),
      .ThADR(ALU_ThADR)
   );
   
   // Control logic
   controllogic controllogic_Inst(
      // Clock and reset
      .nRESET(nRESET),
      .CLK(CLK),
      .CLKEN(CLKEN),
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Control signals commom for several modules
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .BigEndianMode(BigEndianMode),
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Instruction pipeline and data in registers control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Interfaces for the internal CPU modules
      .InstForDecode(IPDR_InstForDecode),
      .InstFetchAbort(IPDR_InstFetchAbort),
      .StagnatePipeline(IPDR_StagnatePipeline),
      .StagnatePipelineDel(IPDR_StagnatePipelineDel),
      .FirstInstFetch(IPRD_FirstInstFetch),
      // Data out register and control(sign/zero, byte/halfword  extension)
      .SignExt(IPDR_SignExt),
      .ZeroExt(IPDR_ZeroExt),
      .nB_HW(IPDR_nB_HW),
      // Bus control
      .EndianMode(IPDR_EndianMode),
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Data output register control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .StoreHalfWord(DOR_StoreHalfWord),
      .StoreByte(DOR_StoreByte),
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Address multiplexer and incrementer control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .ExceptionVector(AMI_ExceptionVector),
      .PCInSel(AMI_PCInSel),
      .ALUInSel(AMI_ALUInSel),
      .ExceptionVectorSel(AMI_ExceptionVectorSel),
      .PCIncStep(AMI_PCIncStep),
      .AdrIncStep(AMI_AdrIncStep),
      .AdrToPCSel(AMI_AdrToPCSel),
      .AdrCntEn(AMI_AdrCntEn),
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // ALU control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .InvA(ALU_InvA),
      .InvB(ALU_InvB),
      .PassA(ALU_PassA),
      .PassB(ALU_PassB),
      // Logic operations
      .AND_Op(ALU_AND_Op),
      .ORR_Op(ALU_ORR_Op),
      .EOR_Op(ALU_EOR_Op),
      // Flag inputs
      .CFlagUse(ALU_CFlagUse),
      // Flag outputs
      .CFlagOut(ALU_CFlagOut),
      .VFlagOut(ALU_VFlagOut),
      .NFlagOut(ALU_NFlagOut),
      .ZFlagOut(ALU_ZFlagOut),
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Multiplier control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .LoadRsRm(Mult_LoadRsRm),
      .LoadPS(Mult_LoadPS),
      .ClearPSC(Mult_ClearPSC),
      .UnsignedMul(Mult_UnsignedMul),
      .ReadLH(Mult_ReadLH),
      .MulResRdy(Mult_MulResRdy),
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Register file control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .ABusRdAdr(RegFile_ABusRdAdr),
      .BBusRdAdr(RegFile_BBusRdAdr),
      .WriteAdr(RegFile_WriteAdr),
      .WrEn(RegFile_WrEn),
      // Program counter
      .PCWrEn(RegFile_PCWrEn),
      .PCSrcSel(RegFile_PCSrcSel),
      // Mode control signals
      .RFMode(RegFile_RFMode),
      .SaveBaseReg(RegFile_SaveBaseReg),
      .RestoreBaseReg(RegFile_RestoreBaseReg),

      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Programm Status Registers control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // ALU bus input control
      .PSRDInSel(PSR_PSRDInSel),
      // Current program state
      .CPSRIn(PSR_CPSRIn),
      .CPSRWrEn(PSR_CPSRWrEn),
      .CPSROut(PSR_CPSROut),
      .CFlForMul(PSR_CFlForMul),
      // Saved program state
      .SPSRIn(PSR_SPSRIn),
      .SPSROut(PSR_SPSROut),
      .SPSRWrMsk(PSR_SPSRWrMsk),
      // PSR mode control
      .PSRMode(PSR_PSRMode),

      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Shifter control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      //	                   ShCFlagIn  => ,
      //					   ShCFlagOut => ,
      .ShLenImm(Shifter_ShLenImm),
      .ShType(Shifter_ShType),
      .ShRotImm(Shifter_ShRotImm),
      .ShEn(Shifter_ShEn),
      .ShCFlagEn(Shifter_ShCFlagEn),
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Bus A multiplexer control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .RegFileAOutSel(ABM_RegFileAOutSel),
      .MultiplierAOutSel(ABM_MultiplierAOutSel),
      .CPSROutSel(ABM_CPSROutSel),
      .SPSROutSel(ABM_SPSROutSel),
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Bus B multiplexer control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .RegFileBOutSel(BBM_RegFileBOutSel),
      .MultiplierBOutSel(BBM_MultiplierBOutSel),
      .MemDataRegOutSel(BBM_MemDataRegOutSel),
      .SExtOffset24BitSel(BBM_SExtOffset24BitSel),
      .Offset12BitSel(BBM_Offset12BitSel),
      .Offset8BitSel(BBM_Offset8BitSel),
      .Immediate8BitSel(BBM_Immediate8BitSel),
      .AdrGenDataSel(BBM_AdrGenDataSel),

      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Address generator for Load/Store instructions control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .RegisterList(LSAdrGen_RegisterList),
      .IncBeforeSel(LSAdrGen_IncBeforeSel),
      .DecBeforeSel(LSAdrGen_DecBeforeSel),
      .DecAfterSel(LSAdrGen_DecAfterSel),
      .MltAdrSel(LSAdrGen_MltAdrSel),
      .SngMltSel(LSAdrGen_SngMltSel),

      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Bit 0,1 clear/set control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .ClrBitZero(RBM_ClrBitZero),
      .ClrBitOne(RBM_ClrBitOne),
      .SetBitZero(RBM_SetBitZero),
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Thumb decoder control
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .ThumbDecoderEn(ThDC_ThumbDecoderEn),
      .ThBLFP(ThDC_ThBLFP),
      .ThBLSP(ThDC_ThBLSP),

      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Rm[0] input for ARM/Thumb state detection during BX
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .RmBitZero(RegFile_BBusOut[0]),		// !!! Check A or B bus
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // AddrLow for DataRotator in IPDR
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      .Addr(ADDR_Int),
      .DataAddrLow(IPDR_DataAddrLow),
      
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // External signals
      // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
      // Interrupts
      .nIRQ(nIRQ),
      .nFIQ(nFIQ),
      // Memory interface
      .ABORT(ABORT),
      .WRITE(WRITE),
      .SIZE(SIZE_Int),
      .PREEMPTABLE(PREEMPTABLE_Int)
   );
   
   // Generate CLKEN signal
   assign CLKEN = (~PAUSE);
   
   assign ADDR = ADDR_Int;
   assign SIZE = SIZE_Int;
   assign MODE = PSR_CPSROut[4:0];
   assign PREEMPTABLE = PREEMPTABLE_Int;
   
endmodule
