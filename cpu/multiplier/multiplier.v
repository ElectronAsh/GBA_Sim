//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// Tue Jul 30 2019 21:12:19
//
//      Input file      : 
//      Component name  : multiplier
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------

//**************************************************************************************************** 
// Multiplier for ARM core 
// Designed by Ruslan Lepetenok 
// Modified 12.02.2003 
//**************************************************************************************************** 

module multiplier(
   nRESET,
   CLK,
   CLKEN,
   ADataIn,
   BDataIn,
   ADataOut,
   BDataOut,
   LoadRsRm,
   LoadPS,
   ClearPSC,
   UnsignedMul,
   ReadLH,
   MulResRdy
);
   // Global signals 
   input         nRESET;
   input         CLK;
   input         CLKEN;
   // Data inputs 
   input [31:0]  ADataIn;		// RdHi(Rn)/Rs data path  
   input [31:0]  BDataIn;		// RdLo(Rd)/Rm data path 
   // Data outputs 
   output [31:0] ADataOut;
   output [31:0] BDataOut;
   // Control inputs 
   input         LoadRsRm;		// Load Rs and Rm and start 
   input         LoadPS;		// Load partial sum register with RHi:RLo    
   input         ClearPSC;		// Clear prtial sum register 
   input         UnsignedMul;		// Unsigned multiplication 
   input         ReadLH;		// 0 - Read PS/PC low,1 - Read PS/PC high 
   // Control outputs 
   output        MulResRdy;		// Multiplication result is ready 
   
   
   // Multiplier control and partial sum/carry registers 
   // Global signals 
   // Interface for the 32x8 combinatorial multiplier  
   // ??? Size  
   // ??? Size  
   // ??? Size  
   // ??? Size  
   // Data inputs 
   // RdHi(Rn)/Rs data path  
   // RdLo(Rd)/Rm data path 
   // Control inputs 
   // Load Rs and Rm and start 
   // Load partial sum register with RHi:RLo    
   // Clear prtial sum register 
   // Unsigned multiplication 
   // 0 - Read PS/PC low,1 - Read PS/PC high 
   // Control outputs 
   // Multiplication result is ready 
   // Result 
   
   // Signal declarations 
   
   wire [31:0]   RmIn;
   wire [8:0]    Rs9In;
   wire [63:0]   PartialSumIn;
   wire [63:0]   PartialCarryIn;
   wire [63:0]   PartialSumOut;
   wire [63:0]   PartialCarryOut;
   wire          PP4P;
   wire          PP4M;
   
   
   mulctrlandregs #(1'b1) ControlAndRegs(
      // Global signals 
      .nRESET(nRESET),
      .CLK(CLK),
      .CLKEN(CLKEN),
      // Interface for the 32x8 combinatorial multiplier  
      .Rs9Out(Rs9In),
      .PartialSumOut(PartialSumIn),
      .PartialCarryOut(PartialCarryIn),
      .PartialSumIn(PartialSumOut),
      .PartialCarryIn(PartialCarryOut),
      .PP4P(PP4P),
      .PP4M(PP4M),
      // Data inputs 
      .ADataIn(ADataIn),
      .BDataIn(BDataIn),
      // Control inputs 
      .LoadRsRm(LoadRsRm),
      .LoadPS(LoadPS),
      .ClearPSC(ClearPSC),
      .UnsignedMul(UnsignedMul),
      .ReadLH(ReadLH),
      // Control outputs 
      .MulResRdy(MulResRdy),
      // Result 
      .ResPartSum(ADataOut),
      .ResPartCarry(BDataOut)
   );
   
   
   mul32x8comb MultComb(
      .RmIn(BDataIn),
      .Rs9In(Rs9In),
      .PartialSumIn(PartialSumIn),
      .PartialCarryIn(PartialCarryIn),
      .PartialSumOut(PartialSumOut),
      .PartialCarryOut(PartialCarryOut),
      .UMul(UnsignedMul),
      .PP4P(PP4P),
      .PP4M(PP4M)
   );
   
endmodule
