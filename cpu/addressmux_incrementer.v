//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// Tue Jul 30 2019 21:09:48
//
//      Input file      : 
//      Component name  : addressmux_incrementer
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------

//**************************************************************************************************** 
// Address multiplexer and incrementer for ARM7TDMI-S processor 
// Designed by Ruslan Lepetenok 
// Modified 15.12.2002 
//**************************************************************************************************** 

module addressmux_incrementer(
   nRESET,
   CLK,
   CLKEN,
   ADDR,
   FromPC,
   ToPC,
   FromALU,
   ExceptionVector,
   PCInSel,
   ALUInSel,
   ExceptionVectorSel,
   PCIncStep,
   AdrIncStep,
   AdrToPCSel,
   AdrCntEn
);
   // Clock and reset 
   input         nRESET;
   input         CLK;
   input         CLKEN;
   // Address and control 
   output [31:0] ADDR;
   input [31:0]  FromPC;
   output [31:0] ToPC;
   input [31:0]  FromALU;
   input [31:0]  ExceptionVector;
   input         PCInSel;
   input         ALUInSel;
   input         ExceptionVectorSel;
   input         PCIncStep;
   input         AdrIncStep;
   input         AdrToPCSel;
   input         AdrCntEn;
   
   
   wire [31:0]   AddressMUX;
   wire [31:0]   Adr_Inc;
   reg [31:0]    AdrReg;
   wire [31:0]   PC_Inc;
   
   assign Adr_Inc = (AdrIncStep == 1'b0) ? AddressMUX + 4 : 		// ARM mode or Load/Store multiple  
                    AddressMUX + 2;		// Thumb mode 
   
   assign PC_Inc = (PCIncStep == 1'b0) ? FromPC + 4 : 		// ARM mode 
                   FromPC + 2;		// Thumb mode 
   
   
   always @(negedge nRESET or posedge CLK)
   begin: AddressIncReg
      if (nRESET == 1'b0)		// Reset 
         AdrReg <= {32{1'b0}};
      else 		// Clock 
      begin
         if (AdrCntEn == 1'b1 & CLKEN == 1'b1)		// Clock enable 
            AdrReg <= Adr_Inc;
      end
   end
 
   /*
   generate
      begin : xhdl0
         genvar        i;
         for (i = 31; i >= 0; i = i - 1)
         begin : AdrInMUX
            // Load/store operations 
            // Branches 
            assign AddressMUX[i] = (FromPC[i] & PCInSel) | (FromALU[i] & ALUInSel) | (ExceptionVector[i] & ExceptionVectorSel) | (AdrReg[i] & (~(PCInSel | ALUInSel | ExceptionVectorSel)));		// Exceptions 
         end
      end
   endgenerate
   // Nomal program execution 
   */
   
   assign AddressMUX = (PCInSel) ? FromPC :
					   (ALUInSel) ? FromALU :
					   (ExceptionVectorSel) ? ExceptionVector :
						AdrReg;	// Else if ~(PCInSel | ALUInSel | ExceptionVectorSel). ElectronAsh.
   
   // Outputs 
   assign ADDR = AddressMUX;
   assign ToPC = (AdrToPCSel == 1'b1) ? AddressMUX : 
                 PC_Inc;
   
endmodule
