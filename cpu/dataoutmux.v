//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// Tue Jul 30 2019 21:10:13
//
//      Input file      : 
//      Component name  : dataoutmux
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------

//**************************************************************************************************** 
// Data out register for ARM core 
// Designed by Ruslan Lepetenok 
// Modified 04.12.2002 
//**************************************************************************************************** 

module dataoutmux(
   StoreHalfWord,
   StoreByte,
   BigEndianMode,
   DataIn,
   WDATA
);
   // Control signals 
   input         StoreHalfWord;
   input         StoreByte;
   input         BigEndianMode;
   // Data signals  
   input [31:0]  DataIn;
   output [31:0] WDATA;
   
   
   wire [31:0]   ByteReplication;
   wire [31:0]   HalfWordReplication;
   wire [31:0]   WrDataMux;
   
   assign ByteReplication = {DataIn[7:0], DataIn[7:0], DataIn[7:0], DataIn[7:0]};
   assign HalfWordReplication = {DataIn[15:0], DataIn[15:0]};
   
   generate
      begin : xhdl0
         genvar        i;
         for (i = 31; i >= 0; i = i - 1)
         begin : WriteDataMultiplexer
            // Store byte 
            assign WrDataMux[i] = (ByteReplication[i] & StoreByte) | (HalfWordReplication[i] & StoreHalfWord) | (DataIn[i] & (~(StoreByte | StoreHalfWord)));		// Store halfword 
         end
      end
   endgenerate
   // Store word 
   
   // Little endian to Big endian convertion ?? 
   assign WDATA = (BigEndianMode == 1'b0) ? WrDataMux : 		// Little endian mode 
                  {WrDataMux[7:0], WrDataMux[15:8], WrDataMux[23:16], WrDataMux[31:24]};		// Big endian mode 
   
endmodule
