//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// Tue Jul 30 2019 21:10:55
//
//      Input file      : 
//      Component name  : thumbdecoder
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------

//****************************************************************************************************
// Thumb decoder for ARM7TDMI-S processor
// Designed by Ruslan Lepetenok
// Modified 30.01.2003
//****************************************************************************************************

module thumbdecoder(
   CLK,
   nRESET,
   CLKEN,
   InstForDecode,
   ExpandedInst,
   HalfWordAddress,
   ThumbDecoderEn,
   StagnatePipeline,
   ThBLFP,
   ThBLSP,
   ThADR
);
   input           CLK;
   input           nRESET;
   input           CLKEN;
   input [31:0]    InstForDecode;
   output [31:0]   ExpandedInst;
   input           HalfWordAddress;
   input           ThumbDecoderEn;
   input           StagnatePipeline;
   output          ThBLFP;
   output          ThBLSP;
   output          ThADR;
   
   
   wire [15:0]     HalfWordForDecode;
   
   reg [31:0]      DecoderOut;
   
   reg             ThBLFP_Int;		// The first part of Thumb branch with link instruction
   reg             ThBLSP_Int;		// The second part of Thumb branch with link instruction
   reg [10:0]      ThBLFP_Reg;
   reg             ThBLFP_Reg_EN;
   
   reg             ThADR_IDC;
   reg             ThADR_Int;
   //---------------------------------------------------------------
   // Instruction types
   
   //----------------------------------------------------------------
   
   // Constants
   parameter [4:0] CThBLFP = 5'b11110;		// First part of Thumb BL
   parameter [4:0] CThBLSP = 5'b11111;		// Second part of Thumb BL
   
   assign HalfWordForDecode = (HalfWordAddress == 1'b0) ? InstForDecode[15:0] : 
                              InstForDecode[31:16];
   
   assign ExpandedInst = (ThumbDecoderEn == 1'b1) ? DecoderOut : 		// Thumb instruction
                         InstForDecode;		// ARM instruction
   
   
   always @(negedge nRESET or posedge CLK)
   begin: ThADR_Register
      if (nRESET == 1'b0)
         ThADR_Int <= 1'b0;
      else 
      begin
         if (CLKEN == 1'b1 & StagnatePipeline == 1'b0)
            ThADR_Int <= ThADR_IDC;
      end
   end
   
   
   always @(negedge nRESET or posedge CLK)
   begin: ThBL_Reg
      if (nRESET == 1'b0)
         ThBLFP_Reg <= {11{1'b0}};
      else 		// Maybe need CLKEN?
      begin
         if (CLKEN == 1'b1 & ThBLFP_Reg_EN == 1'b1)
            ThBLFP_Reg <= HalfWordForDecode[10:0];
      end
   end
   
   // Combinatorial process
   // Naming based on ARM ISA
   //ThBLFP_Int <= '1' when HalfWordForDecode(15 downto 11)=CThBLFP else '0';
   //ThBLSP_Int <= '1' when HalfWordForDecode(15 downto 11)=CThBLSP else '0';
   
   
   always @(HalfWordForDecode)
   begin: ThDcdComb
      // Move Instructions
      ThBLFP_Int <= 1'b0;
      ThBLSP_Int <= 1'b0;
      ThBLFP_Reg_EN <= 1'b0;
      ThADR_IDC <= 1'b0;
      DecoderOut[31:0] <= {32{1'b0}};
      if (HalfWordForDecode[15:11] == 5'b00100)		// MOV1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00111011;
         DecoderOut[19:16] <= 4'b0000;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[11:8] <= 4'b0000;
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
      end
      else if (HalfWordForDecode[15:6] == 10'b0001110000)		// MOV2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00101001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:0] <= 12'b000000000000;
      end
      else if (HalfWordForDecode[15:8] == 8'b01000110)		// MOV3
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011010;
         DecoderOut[19:16] <= 4'b0000;
         DecoderOut[15] <= HalfWordForDecode[7];
         DecoderOut[14:12] <= HalfWordForDecode[2:0];
         DecoderOut[11:4] <= {4'b0000, 4'b0000};
         DecoderOut[3] <= HalfWordForDecode[6];
         DecoderOut[2:0] <= HalfWordForDecode[5:3];
      end
      // Arithmetic Instructions
      else if (HalfWordForDecode[15:6] == 10'b0100000101)		// ADC
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00001011;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:9] == 7'b0001110)		// ADD1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00101001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:3] <= 9'b000000000;
         DecoderOut[2:0] <= HalfWordForDecode[8:6];
      end
      else if (HalfWordForDecode[15:11] == 5'b00110)		// ADD2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00101001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[11:8] <= 4'b0000;
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
      end
      else if (HalfWordForDecode[15:9] == 7'b0001100)		// ADD3
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00001001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[8:6]};
      end
      else if (HalfWordForDecode[15:8] == 8'b01000100)		// ADD4
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00001000;
         DecoderOut[19] <= HalfWordForDecode[7];
         DecoderOut[18:16] <= HalfWordForDecode[2:0];
         DecoderOut[15] <= HalfWordForDecode[7];
         DecoderOut[14:12] <= HalfWordForDecode[2:0];
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3] <= HalfWordForDecode[6];
         DecoderOut[2:0] <= HalfWordForDecode[5:3];
      end
      else if (HalfWordForDecode[15:11] == 5'b10100)		// ADD5
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00101000;
         DecoderOut[19:16] <= 4'b1111;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[11:8] <= 4'b1111;
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
         ThADR_IDC <= 1'b1;
      end
      else if (HalfWordForDecode[15:11] == 5'b10101)		// ADD6
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00101000;
         DecoderOut[19:16] <= 4'b1101;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[11:8] <= 4'b1111;
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
      end
      else if (HalfWordForDecode[15:7] == 9'b101100000)		// ADD7
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00101000;
         DecoderOut[19:16] <= 4'b1101;
         DecoderOut[15:12] <= 4'b1101;
         DecoderOut[11:7] <= 5'b11110;
         DecoderOut[6:0] <= HalfWordForDecode[6:0];
      end
      else if (HalfWordForDecode[15:6] == 10'b0100001011)		// CMN
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00010111;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[15:12] <= 4'b0000;
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:11] == 5'b00101)		// CMP1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00110101;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[15:12] <= 4'b0000;
         DecoderOut[11:8] <= 4'b0000;
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
      end
      else if (HalfWordForDecode[15:6] == 10'b0100001010)		// CMP2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00010101;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[15:12] <= 4'b0000;
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:8] == 8'b01000101)		// CMP3
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00010101;
         DecoderOut[19] <= HalfWordForDecode[7];
         DecoderOut[18:16] <= HalfWordForDecode[2:0];
         DecoderOut[15:12] <= 4'b0000;
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3] <= HalfWordForDecode[6];
         DecoderOut[2:0] <= HalfWordForDecode[5:3];
      end
      else if (HalfWordForDecode[15:6] == 10'b0100001101)		// MUL
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00000001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[15:12] <= 4'b0000;
         DecoderOut[11:8] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[7:4] <= 4'b1001;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:6] == 10'b0100001001)		// NEG
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00100111;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:0] <= 12'b000000000000;
      end
      else if (HalfWordForDecode[15:6] == 10'b0100000110)		// SBC
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00001101;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:9] == 7'b0001111)		// SUB1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00100101;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:3] <= 9'b000000000;
         DecoderOut[2:0] <= HalfWordForDecode[8:6];
      end
      else if (HalfWordForDecode[15:11] == 5'b00111)		// SUB2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00100101;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[11:8] <= 4'b0000;
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
      end
      else if (HalfWordForDecode[15:9] == 7'b0001101)		// SUB3
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00000101;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[8:6]};
      end
      else if (HalfWordForDecode[15:7] == 9'b101100001)		// SUB4
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00100100;
         DecoderOut[19:16] <= 4'b1101;
         DecoderOut[15:12] <= 4'b1101;
         DecoderOut[11:7] <= 5'b11110;
         DecoderOut[6:0] <= HalfWordForDecode[6:0];
      end
      // Logical Operations
      else if (HalfWordForDecode[15:6] == 10'b0100000000)		// AND
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00000001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:6] == 10'b0100001110)		// BIC
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011101;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:6] == 10'b0100000001)		// EOR
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00000011;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:6] == 10'b0100001111)		// MVN
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011111;
         DecoderOut[19:16] <= 4'b0000;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:6] == 10'b0100001100)		// ORR
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:6] == 10'b0100001000)		// TST
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00010001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[15:12] <= 4'b0000;
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      // Shift/Rotate Instructions
      else if (HalfWordForDecode[15:11] == 5'b00000)		// LSL1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011011;
         DecoderOut[19:16] <= 4'b0000;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:7] <= HalfWordForDecode[10:6];
         DecoderOut[6:4] <= 3'b000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:6] == 10'b0100000010)		// LSL2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011011;
         DecoderOut[19:16] <= 4'b0000;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:8] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[7:4] <= 4'b0001;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[2:0]};
      end
      else if (HalfWordForDecode[15:11] == 5'b00001)		// LSR1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011011;
         DecoderOut[19:16] <= 4'b0000;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:7] <= HalfWordForDecode[10:6];
         DecoderOut[6:4] <= 3'b010;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:6] == 10'b0100000011)		// LSR2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011011;
         DecoderOut[19:16] <= 4'b0000;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:8] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[7:4] <= 4'b0011;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[2:0]};
      end
      else if (HalfWordForDecode[15:11] == 5'b00010)		// ASR1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011011;
         DecoderOut[19:16] <= 4'b0000;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:7] <= HalfWordForDecode[10:6];
         DecoderOut[6:4] <= 3'b100;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[5:3]};
      end
      else if (HalfWordForDecode[15:6] == 10'b0100000100)		// ASR2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011011;
         DecoderOut[19:16] <= 4'b0000;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:8] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[7:4] <= 4'b0101;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[2:0]};
      end
      else if (HalfWordForDecode[15:6] == 10'b0100000111)		// ROR
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011011;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:8] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[7:4] <= 4'b0111;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[2:0]};
      end
      // Branch Instructions
      else if (HalfWordForDecode[15:12] == 4'b1101)		// B1
      begin
         DecoderOut[31:28] <= HalfWordForDecode[11:8];
         DecoderOut[27:24] <= 4'b1010;
         DecoderOut[23:8] <= HalfWordForDecode[7];		// Sign extend
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
      end
      else if (HalfWordForDecode[15:11] == 5'b11100)		// B2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:24] <= 4'b1010;
         DecoderOut[23:11] <= HalfWordForDecode[10];		// sign extend
         DecoderOut[10:0] <= HalfWordForDecode[10:0];
      end
      else if (HalfWordForDecode[15:13] == 3'b111)		// BL
      begin
         if (HalfWordForDecode[12:11] == 2'b10)		// 1st Part of BL
         begin
            ThBLFP_Reg_EN <= 1'b1;		// NOP
            //ThBLFP <= '1';
            DecoderOut[31:28] <= 4'b1110;
            DecoderOut[27:24] <= 4'b0000;
            DecoderOut[23:11] <= 13'b0000000000000;
            DecoderOut[10:0] <= 11'b00000000000;
         end
         else
         begin
            // HalfWordForDecode(12:11)="11" - 2nd part of BL
            //ThBLSP <= '1';
            DecoderOut[31:28] <= 4'b1110;
            DecoderOut[27:24] <= 4'b1011;
            DecoderOut[23] <= ThBLFP_Reg[10];
            DecoderOut[22:12] <= ThBLFP_Reg;
            DecoderOut[11:1] <= ((HalfWordForDecode[10:0]) - 1);
            DecoderOut[0] <= 1'b0;
         end
      end
      else if (HalfWordForDecode[15:7] == 9'b010001110)		// BX
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:24] <= 4'b0001;
         DecoderOut[23:20] <= 4'b0010;
         DecoderOut[19:16] <= 4'b1111;
         DecoderOut[15:12] <= 4'b1111;
         DecoderOut[11:8] <= 4'b1111;
         DecoderOut[7:4] <= 4'b0001;
         DecoderOut[3] <= HalfWordForDecode[6];
         DecoderOut[2:0] <= HalfWordForDecode[5:3];
      end
      // Load
      else if (HalfWordForDecode[15:11] == 5'b11001)		// LDMIA
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:22] <= 6'b100010;
         
         //DecoderOut(21) <= '0' when HalfWordForDecode(HalfWordForDecode(10 downto 8))='1'
         //                      else '1';
         // Send help, I am lost
         DecoderOut[21] <= 1'b1;
         DecoderOut[20] <= 1'b1;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[15:8] <= 8'b00000000;
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
      end
      else if (HalfWordForDecode[15:11] == 5'b01101)		// LDR1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b01011001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:7] <= 5'b00000;
         DecoderOut[6:2] <= HalfWordForDecode[10:6];
         DecoderOut[1:0] <= 2'b00;
      end
      else if (HalfWordForDecode[15:9] == 7'b0101100)		// LDR2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b01111001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[8:6]};
      end
      else if (HalfWordForDecode[15:11] == 5'b01001)		// LDR3
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b01011001;
         DecoderOut[19:16] <= 4'b1111;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[11:10] <= 2'b00;
         DecoderOut[9:2] <= HalfWordForDecode[7:0];
         DecoderOut[1:0] <= 2'b00;
      end
      else if (HalfWordForDecode[15:11] == 5'b10011)		// LDR4
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b01011001;
         DecoderOut[19:16] <= 4'b1101;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[11:10] <= 2'b00;
         DecoderOut[9:2] <= HalfWordForDecode[7:0];
         DecoderOut[1:0] <= 2'b00;
      end
      else if (HalfWordForDecode[15:11] == 5'b01111)		// LDRB1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b01011101;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:5] <= 7'b0000000;
         DecoderOut[4:0] <= HalfWordForDecode[10:6];
      end
      else if (HalfWordForDecode[15:9] == 7'b0101110)		// LDRB2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b01111101;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[8:6]};
      end
      else if (HalfWordForDecode[15:11] == 5'b10001)		// LDRH1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011101;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:10] <= 2'b00;
         DecoderOut[9:8] <= HalfWordForDecode[10:9];
         DecoderOut[7:4] <= 4'b1011;
         DecoderOut[3:1] <= HalfWordForDecode[8:6];
         DecoderOut[0] <= 1'b0;
      end
      else if (HalfWordForDecode[15:9] == 7'b0101101)		// LDRH2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:8] <= 4'b0000;
         DecoderOut[7:4] <= 4'b1011;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[8:6]};
      end
      else if (HalfWordForDecode[15:9] == 7'b0101011)		// LDRSB
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:8] <= 4'b0000;
         DecoderOut[7:4] <= 4'b1101;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[8:6]};
      end
      else if (HalfWordForDecode[15:9] == 7'b0101111)		// LDRSH
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011001;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:8] <= 4'b0000;
         DecoderOut[7:4] <= 4'b1111;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[8:6]};
      end
      // Store Instructions
      else if (HalfWordForDecode[15:11] == 5'b11000)		//STMIA
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b10001010;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[15:8] <= 8'b00000000;
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
      end
      else if (HalfWordForDecode[15:11] == 5'b01100)		// STR1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b01011000;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:7] <= 5'b00000;
         DecoderOut[6:2] <= HalfWordForDecode[10:6];
         DecoderOut[1:0] <= 2'b00;
      end
      else if (HalfWordForDecode[15:9] == 7'b0101000)		// STR2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b01111000;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[8:6]};
      end
      else if (HalfWordForDecode[15:11] == 5'b10010)		// STR3
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b01011000;
         DecoderOut[19:16] <= 4'b1101;
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[10:8]};
         DecoderOut[11:10] <= 2'b00;
         DecoderOut[9:2] <= HalfWordForDecode[7:0];
         DecoderOut[1:0] <= 2'b00;
      end
      else if (HalfWordForDecode[15:11] == 5'b01110)		// STRB1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b01011100;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:5] <= 7'b0000000;
         DecoderOut[4:0] <= HalfWordForDecode[10:6];
      end
      else if (HalfWordForDecode[15:9] == 7'b0101010)		// STRB2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b01111100;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:4] <= 8'b00000000;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[8:6]};
      end
      else if (HalfWordForDecode[15:11] == 5'b10000)		// STRH1
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011100;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:10] <= 2'b00;
         DecoderOut[9:8] <= HalfWordForDecode[10:9];
         DecoderOut[7:4] <= 4'b1011;
         DecoderOut[3:1] <= HalfWordForDecode[8:6];
         DecoderOut[0] <= 1'b0;
      end
      else if (HalfWordForDecode[15:9] == 7'b0101001)		// STRH2
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b00011000;
         DecoderOut[19:16] <= {1'b0, HalfWordForDecode[5:3]};
         DecoderOut[15:12] <= {1'b0, HalfWordForDecode[2:0]};
         DecoderOut[11:8] <= 4'b0000;
         DecoderOut[7:4] <= 4'b1011;
         DecoderOut[3:0] <= {1'b0, HalfWordForDecode[8:6]};
      end
      // Other
      else if (HalfWordForDecode[15:9] == 7'b1011110)		// Pop
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b10001011;
         DecoderOut[19:16] <= 4'b1101;
         DecoderOut[15] <= HalfWordForDecode[8];
         DecoderOut[14:8] <= 7'b0000000;
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
      end
      else if (HalfWordForDecode[15:9] == 7'b1011010)		// PUSH
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:20] <= 8'b10010010;
         DecoderOut[19:16] <= 4'b1101;
         DecoderOut[15] <= 1'b0;
         DecoderOut[14] <= HalfWordForDecode[8];
         DecoderOut[13:8] <= 6'b000000;
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
      end
      else if (HalfWordForDecode[15:8] == 8'b11011111)		// SWI
      begin
         DecoderOut[31:28] <= 4'b1110;
         DecoderOut[27:24] <= 4'b1111;
         DecoderOut[23:8] <= 16'b0000000000000000;
         DecoderOut[7:0] <= HalfWordForDecode[7:0];
      end
      else
         DecoderOut <= {32{1'bX}};
   end
   
   // Outputs
   assign ThBLFP = ThBLFP_Int;
   assign ThBLSP = ThBLSP_Int;
   assign ThADR = ThADR_Int & ThumbDecoderEn;
   
endmodule

